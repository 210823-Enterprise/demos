package com.revature.data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.revature.model.Person;

/**
 * 
 * The @Transactional annotation is metadata that specifies that an interface,
 * class, or method must have transactional semantics; for example, "start a
 * brand new read-only transaction when this method is invoked, suspending any
 * existing transaction".
 */

@Repository
@Transactional
public class PersonJpaRepository {
	
	// connect to the database
	@PersistenceContext
	EntityManager entityManager;
	
	
	// capture the sessio/connection and perform CRUD operations
	
	public Person findById(int id) {
		
		// We don't need to write a custom query because it's generated by Hibernate
		// Hibernate is the implementation of the JPA specification
		// Hibernate is provided to us by Spring Data
		
		return entityManager.find(Person.class, id);
	}
	
	public Person insert(Person person) {
		
		return entityManager.merge(person);
		
	}
	
	public Person update(Person person) {
		
		return entityManager.merge(person);
		
	}
	
	public void deleteById(int id) {
		
		Person person = findById(id);
		
		entityManager.remove(person);
		
	}
	
	public List<Person> findAll() {
		
		TypedQuery<Person> namedQuery = entityManager.createNamedQuery("find_all_people", Person.class);
		return namedQuery.getResultList();
		
	}	

}
